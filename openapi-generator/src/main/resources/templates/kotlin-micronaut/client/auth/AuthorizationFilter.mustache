{{>common/licenseInfo}}
package {{invokerPackage}}.auth

import io.micronaut.context.BeanContext
import io.micronaut.core.annotation.NonNull
import io.micronaut.core.annotation.Nullable
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpResponse
import io.micronaut.http.MutableHttpRequest
import io.micronaut.http.annotation.Filter
import io.micronaut.http.filter.ClientFilterChain
import io.micronaut.http.filter.HttpClientFilter
import io.micronaut.inject.qualifiers.Qualifiers
import io.micronaut.security.oauth2.client.clientcredentials.ClientCredentialsClient
import io.micronaut.security.oauth2.client.clientcredentials.ClientCredentialsConfiguration
import io.micronaut.security.oauth2.client.clientcredentials.propagation.ClientCredentialsHttpClientFilter
import io.micronaut.security.oauth2.client.clientcredentials.propagation.ClientCredentialsTokenPropagator
import io.micronaut.security.oauth2.configuration.OauthClientConfiguration
import {{invokerPackage}}.auth.configuration.ConfigurableAuthorization
import org.reactivestreams.Publisher
import org.slf4j.LoggerFactory
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import java.util.stream.Collectors
import java.util.stream.Stream
{{#generatedAnnotation}}
import {{javaxPackage}}.annotation.Generated
{{/generatedAnnotation}}

{{#generatedAnnotation}}
{{>common/generatedAnnotation}}
{{/generatedAnnotation}}
@Filter({{#configureAuthFilterPattern}}"{{authorizationFilterPattern}}"{{/configureAuthFilterPattern}}{{^configureAuthFilterPattern}}Filter.MATCH_ALL_PATTERN{{/configureAuthFilterPattern}})
open class AuthorizationFilter(
    defaultTokenPropagator: ClientCredentialsTokenPropagator,
    clientConfigurations: Stream<OauthClientConfiguration>,
    configurableAuthorizations: Stream<ConfigurableAuthorization>,
    private val beanContext: BeanContext,
) : HttpClientFilter {

    val authorizationsByName: Map<String, ConfigurableAuthorization?>

    private val clientConfigurationByName: Map<String, OauthClientConfiguration?>
    private val tokenPropagatorByName: MutableMap<String, ClientCredentialsTokenPropagator>
    private val clientCredentialsClientByName: MutableMap<String, ClientCredentialsClient>

    init {
        clientConfigurationByName = clientConfigurations
                .filter { obj: OauthClientConfiguration -> obj.isEnabled }
                .collect(Collectors.toMap({ obj: OauthClientConfiguration -> obj.name }, { v: OauthClientConfiguration? -> v }))
        tokenPropagatorByName = HashMap()
        clientCredentialsClientByName = HashMap()
        authorizationsByName = configurableAuthorizations
                .collect(Collectors.toMap({ obj: ConfigurableAuthorization -> obj.getName() }, { v: ConfigurableAuthorization? -> v }))
    }

    override fun doFilter(request: @NonNull MutableHttpRequest<*>, chain: @NonNull ClientFilterChain): Publisher<out HttpResponse<*>?> {
        val names = request.getAttribute(AuthorizationBinder.AUTHORIZATION_NAMES, MutableList::class.java).orElse(null)
        if (names.isNullOrEmpty()) {
            return chain.proceed(request)
        }

        val authorizers = ArrayList<Publisher<HttpRequest<*>?>>(names.size)
        for (nameObject in names) {
            if (nameObject !is String) {
                continue
            }

            // Check if other authorizations have the key
            if (authorizationsByName.containsKey(nameObject)) {
                val authorizer = authorizationsByName[nameObject]!!
                authorizers.add(Mono.fromCallable {
                    authorizer.applyAuthorization(request)
                    request
                })
                continue
            }

            // Perform OAuth authorization
            val clientConfiguration = clientConfigurationByName[nameObject] ?: continue
            val clientCredentialsClient = getClientCredentialsClient(nameObject)
            if (clientCredentialsClient == null) {
                log.trace("Could not retrieve client credentials client for OAuth 2.0 client {}", nameObject)
                continue
            }
            val tokenHandler = getTokenPropagator(nameObject)
            val authorizer = Flux.from(clientCredentialsClient
                    .requestToken(getScope(clientConfiguration)))
                    .map<HttpRequest<*>?> { tokenResponse ->
                        val accessToken = tokenResponse.accessToken
                        if (!accessToken.isNullOrEmpty()) {
                            tokenHandler!!.writeToken(request, accessToken)
                        }
                        request
                    }
            authorizers.add(authorizer)
        }
        return Flux.concat(authorizers)
                .switchMap { chain.proceed(request) }
    }

    protected fun getTokenPropagator(name: String): ClientCredentialsTokenPropagator? {
        var tokenPropagator = tokenPropagatorByName[name]
        if (tokenPropagator == null) {
            tokenPropagator = beanContext.findBean(ClientCredentialsTokenPropagator::class.java, Qualifiers.byName(name))
                    .orElse(defaultTokenPropagator)
            if (tokenPropagator != null) {
                tokenPropagatorByName[name] = tokenPropagator
            }
        }
        return tokenPropagator
    }

    protected fun getClientCredentialsClient(name: String): ClientCredentialsClient? {
        var client = clientCredentialsClientByName[name]
        if (client == null) {
            client = beanContext.findBean(ClientCredentialsClient::class.java, Qualifiers.byName(name)).orElse(null)
            if (client != null) {
                clientCredentialsClientByName[name] = client
            }
        }
        return client
    }

    protected fun getScope(oauthClient: @NonNull OauthClientConfiguration): @Nullable String? {
        return oauthClient.clientCredentials
                .flatMap { obj: ClientCredentialsConfiguration -> obj.scope }
                .orElse(null)
    }

    companion object {
        private val log = LoggerFactory.getLogger(ClientCredentialsHttpClientFilter::class.java)
    }
}
