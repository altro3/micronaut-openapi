plugins {
    id 'io.micronaut.build.internal.openapi-kotlin-generator-test-suite'
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.kotlin.kapt)
}

description = """
This project tests that the generated server sources can be compiled and
that tests can be ran with Micronaut 4
"""

dependencies {
    kapt("io.micronaut.serde:micronaut-serde-processor")
    kapt("io.micronaut.validation:micronaut-validation-processor")
    kapt(mn.micronaut.inject.kotlin)
    kapt(mn.micronaut.inject.java)

    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor(mn.micronaut.inject.kotlin)
    annotationProcessor(mn.micronaut.inject.java)

    implementation("io.micronaut:micronaut-http")
    implementation("io.micronaut.serde:micronaut-serde-api")
    implementation("io.micronaut:micronaut-inject-kotlin")
    implementation("io.micronaut:micronaut-inject-java")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.projectreactor:reactor-core")
    implementation(projects.micronautOpenapi) {
        because("Required for Swagger")
    }
    implementation(mnData.micronaut.data.runtime)
    implementation(libs.kotlin.stdlib.jdk8)
    implementation(libs.kotlin.reflect)

    runtimeOnly mnLogging.logback.classic

    kaptTest(mn.micronaut.inject.kotlin)
    kaptTest(mn.micronaut.inject.java)
    kaptTest("io.micronaut.serde:micronaut-serde-processor")
    kaptTest("io.micronaut.validation:micronaut-validation-processor")

    testCompileOnly("io.micronaut:micronaut-inject-kotlin-test")
    testCompileOnly("io.micronaut:micronaut-inject-java-test")
    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation mnTest.micronaut.test.junit5
    testImplementation libs.junit.jupiter.params

    testRuntimeOnly("io.micronaut:micronaut-json-core")
    testRuntimeOnly("io.micronaut.serde:micronaut-serde-jackson")
    testRuntimeOnly libs.junit.jupiter.engine
    testRuntimeOnly mnLogging.logback.classic
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
}

tasks.named("generateOpenApi") {
    generatorKind = "server"
    openApiDefinition = layout.projectDirectory.file("spec.yaml")
    outputKinds = ["models", "apis", "modelDocs", "supportingFiles", "modelTests", "apiTests"]
    parameterMappings = [
            // Pageable parameter
            [name: "page", location: "QUERY", mappedType: "io.micronaut.data.model.Pageable"],
            [name: "size", location: "QUERY", mappedType: "io.micronaut.data.model.Pageable"],
            [name: "sortOrder", location: "QUERY", mappedType: "io.micronaut.data.model.Pageable"],
            // Ignored header
            [name: "ignored-header", location: "HEADER"],
            // Custom filtering header
            [name: "Filter", location: "HEADER", mappedType: "io.micronaut.openapi.test.filter.MyFilter"]
    ]
    responseBodyMappings = [
            // Response with Last-Modified header mapping
            [headerName: "Last-Modified", mappedBodyType: "io.micronaut.openapi.test.dated.DatedResponse"],
            // Response with Page body
            [headerName: "X-Page-Number", mappedBodyType: "io.micronaut.data.model.Page", isListWrapper: true],
            [headerName: "X-Page-Count", mappedBodyType: "io.micronaut.data.model.Page", isListWrapper: true],
            [headerName: "X-Total-Count", mappedBodyType: "io.micronaut.data.model.Page", isListWrapper: true],
            [headerName: "X-Page-Size", mappedBodyType: "io.micronaut.data.model.Page", isListWrapper: true],
            // Ignored header - Does not wrap the response in HttpResponse
            [headerName: "ignored-header"]
    ]
}
