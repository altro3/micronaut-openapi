package io.micronaut.openapi.visitor

import io.micronaut.openapi.AbstractOpenApiTypeElementSpec
import io.swagger.v3.oas.models.Operation
import io.swagger.v3.oas.models.media.Schema
import io.swagger.v3.oas.models.responses.ApiResponse

class OpenApiPojoControllerJavaSpec extends AbstractOpenApiTypeElementSpec {

    void "test java"() {

        when:
        buildBeanDefinition('test.MyBean', '''
package test;

import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.MediaType;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Get;
import io.micronaut.http.annotation.Produces;
import io.micronaut.http.annotation.QueryValue;
import java.util.Collection;

import com.fasterxml.jackson.annotation.JsonProperty;

@Controller("/hello")
class HelloController {

    @Get
    @Produces(MediaType.TEXT_PLAIN)
    String index(@Nullable @QueryValue("channels") Collection<Channel> channels) {
        return null;
    }

    @Introspected
    enum Channel {
        @JsonProperty("mysys")
        SYSTEM1,
        SYSTEM2
    }
}

@jakarta.inject.Singleton
class MyBean {}
''')
        then: "the state is correct"
        Utils.testReference != null

        when: "The OpenAPI is retrieved"
        def openApi = Utils.testReference
        Operation operation = openApi.paths.'/hello'.get
        Schema schema = openApi.components.schemas.'HelloController.Channel'
        ApiResponse response = operation.responses.'200'

        then: "the components are valid"
        operation.parameters.size() == 1
        operation.parameters[0].name == 'channels'
        operation.parameters[0].in == 'query'
        operation.parameters[0].schema
        operation.parameters[0].schema.type == 'array'
        operation.parameters[0].schema.nullable == true
        operation.parameters[0].schema.items.$ref == '#/components/schemas/HelloController.Channel'

        response.content.'text/plain'.schema.type == 'string'

        schema
        schema.type == 'string'
        schema.enum.size() == 2
        schema.enum[0] == 'mysys'
        schema.enum[1] == 'SYSTEM2'
    }

    void "test java jackson visitor"() {

        when:
        buildBeanDefinition('test.MyBean', '''
package test;

import java.math.BigDecimal;

import io.micronaut.core.annotation.Nullable;
import io.micronaut.http.annotation.Body;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Put;
import io.micronaut.serde.annotation.Serdeable;
import io.swagger.v3.oas.annotations.media.Schema;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import reactor.core.publisher.Mono;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

@Controller
class HelloController {

    @Put("/sendModelWithDiscriminator")
    Mono<Animal> sendModelWithDiscriminator(
        @Body @NotNull @Valid Animal animal
    ) {
        return Mono.empty();
    }
}

@Serdeable
@JsonIgnoreProperties(
        value = "class", // ignore manually set class, it will be automatically generated by Jackson during serialization
        allowSetters = true // allows the class to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "class", visible = true)
@JsonSubTypes({
    @JsonSubTypes.Type(value = Bird.class, name = "ave"),
})
class Animal {

    @JsonProperty("class")
    protected String propertyClass;
    @Schema(name = "color", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @Nullable
    private ColorEnum color;

    public String getPropertyClass() {
        return propertyClass;
    }

    public void setPropertyClass(String propertyClass) {
        this.propertyClass = propertyClass;
    }

    public ColorEnum getColor() {
        return color;
    }

    public void setColor(ColorEnum color) {
        this.color = color;
    }
}

@Serdeable
class Bird extends Animal {

    private Integer numWings;
    private BigDecimal beakLength;
    private String featherDescription;

    public Integer getNumWings() {
        return numWings;
    }

    public void setNumWings(Integer numWings) {
        this.numWings = numWings;
    }

    public BigDecimal getBeakLength() {
        return beakLength;
    }

    public void setBeakLength(BigDecimal beakLength) {
        this.beakLength = beakLength;
    }

    public String getFeatherDescription() {
        return featherDescription;
    }

    public void setFeatherDescription(String featherDescription) {
        this.featherDescription = featherDescription;
    }
}

@Serdeable
enum ColorEnum {

    @JsonProperty("red")
    RED
}

@jakarta.inject.Singleton
class MyBean {}
''')
        then: "the state is correct"
        Utils.testReference != null

        when: "The OpenAPI is retrieved"
        def openApi = Utils.testReference
        def schemas = openApi.components.schemas

        then: "the components are valid"
        schemas.Animal
        schemas.Bird
        schemas.ColorEnum
    }
}
