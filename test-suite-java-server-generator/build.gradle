plugins {
    id 'io.micronaut.build.internal.openapi-java-generator-test-suite'
    id 'groovy'
}

description = """
This project tests that the generated server sources can be compiled and
that tests can be ran with Micronaut 4
"""

dependencies {

    annotationProcessor(mnValidation.micronaut.validation.processor)
    annotationProcessor(mnSerde.micronaut.serde.processor)

    implementation(mn.micronaut.http)
    implementation(mnSerde.micronaut.serde.api)
    implementation(mn.jakarta.annotation.api)
    implementation(mnValidation.micronaut.validation)
    implementation(mnData.micronaut.data.runtime)
    implementation(mnReactor.micronaut.reactor)
    implementation(projects.micronautOpenapi) {
        because("Required for Swagger")
    }

    runtimeOnly(mnLogging.logback.classic)

    testCompileOnly(mn.micronaut.inject.groovy.test)
    testCompileOnly(mn.micronaut.inject.java.test)

    testImplementation(mnTest.micronaut.test.spock)
    testImplementation(mn.micronaut.http.client)

    testRuntimeOnly(mn.micronaut.json.core)
    testRuntimeOnly(mnSerde.micronaut.serde.jackson)
    testRuntimeOnly(mnLogging.logback.classic)
}

sourceSets {
    test {
        java.srcDir('src/test/groovy')
    }
}

tasks.named("generateOpenApi") {
    generatorKind = "server"
    openApiDefinition = layout.projectDirectory.file("spec.yaml")
    outputKinds = ["models", "apis", "modelDocs", "supportingFiles", "modelTests", "apiTests"]
    parameterMappings = [
            // Pageable parameter
            [name: "page", location: "QUERY", mappedType: "io.micronaut.data.model.Pageable"],
            [name: "size", location: "QUERY", mappedType: "io.micronaut.data.model.Pageable"],
            [name: "sortOrder", location: "QUERY", mappedType: "io.micronaut.data.model.Pageable"],
            // Ignored header
            [name: "ignored-header", location: "HEADER"],
            // Custom filtering header
            [name: "Filter", location: "HEADER", mappedType: "io.micronaut.openapi.test.filter.MyFilter"]
    ]
    responseBodyMappings = [
            // Response with Last-Modified header mapping
            [headerName: "Last-Modified", mappedBodyType: "io.micronaut.openapi.test.dated.DatedResponse"],
            // Response with Page body
            [headerName: "X-Page-Number", mappedBodyType: "io.micronaut.data.model.Page", isListWrapper: true],
            [headerName: "X-Page-Count", mappedBodyType: "io.micronaut.data.model.Page", isListWrapper: true],
            [headerName: "X-Total-Count", mappedBodyType: "io.micronaut.data.model.Page", isListWrapper: true],
            [headerName: "X-Page-Size", mappedBodyType: "io.micronaut.data.model.Page", isListWrapper: true],
            // Ignored header - Does not wrap the response in HttpResponse
            [headerName: "ignored-header"]
    ]
}
